eqtl@ubuntu:~/eQTL$ sudo setxkbmap -layout es
eqtl@ubuntu:~/eQTL$ sudo docker run -v $PWD:$PWD -w $PWD -it dgarrimar/eqtlmapping
PATH=$PATH:$PWD/bin

wget ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf{.gz,.gz.tbi} --directory-prefix input/unprocessed/1000g

###Task 2: Subset the input VCF file, keeping only biallelic SNPs and indels with MAF ≥ 0.05 and those sample IDs for which we have both expression and genotype data (for duplicated IDs keep only the first). To do that, we will use bcftools. Besides, discard those variants with less than 10 individuals per genotype group.

# Get GEUVADIS samples from the metadata
cut -f1 input/unprocessed/geuvadis/geuvadis.metadata.txt | sed '1d' | sort | uniq > tmp/geuvadis.samples.txt 

# Subset the VCF (common samples, biallelic SNPs and indels, MAF >= 0.05, no duplicates)
bcftools view -v snps,indels -m 2 -M 2 -q 0.05:minor -S tmp/geuvadis.samples.txt -Ob input/unprocessed/1000g/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz | bcftools norm -d all -Oz -o tmp/genotypes.chr22.vcf.gz

# Subset the VCF so that there are at least 10 individuals per genotype group and compress it (for indexing we require 'bgzip' compression)
filter.genotype.py -t 10 -g <(zcat tmp/genotypes.chr22.vcf.gz) | bgzip > input/processed/genotypes.chr22.vcf.gz

# Index the VCF
tabix -p vcf input/processed/genotypes.chr22.vcf.gz
#Q1:
FILE
    Files can be both VCF or BCF, uncompressed or BGZF-compressed. The file "-" is interpreted as standard input. Some tools may require tabix- or CSI-indexed files. 
-c, --collapse snps|indels|both|all|some|none|id

    Controls how to treat records with duplicate positions and defines compatible records across multiple input files. Here by "compatible" we mean records which should be considered as identical by the tools. For example, when performing line intersections, the desire may be to consider as identical all sites with matching positions (bcftools isec -c all), or only sites with matching variant type (bcftools isec -c snps  -c indels), or only sites with all alleles identical (bcftools isec -c none).

    none
        only records with identical REF and ALT alleles are compatible 
    some
        only records where some subset of ALT alleles match are compatible 
    all
        all records are compatible, regardless of whether the ALT alleles match or not. In the case of records with the same position, only the first will be considered and appear on output. 
    snps
        any SNP records are compatible, regardless of whether the ALT alleles match or not. For duplicate positions, only the first SNP record will be considered and appear on output. 
    indels
        all indel records are compatible, regardless of whether the REF and ALT alleles match or not. For duplicate positions, only the first indel record will be considered and appear on output. 
    both
        abbreviation of "-c indels  -c snps" 
    id
        only records with identical ID column are compatible. Supported by bcftools merge only. 

-f, --apply-filters LIST
    Skip sites where FILTER column does not contain any of the strings listed in LIST. For example, to include only sites which have no filters set, use -f .,PASS. 
--no-version
    Do not append version and command line information to the output VCF header. 
-o, --output FILE
    When output consists of a single stream, write it to FILE rather than to standard output, where it is written by default. 
-O, --output-type b|u|z|v
    Output compressed BCF (b), uncompressed BCF (u), compressed VCF (z), uncompressed VCF (v). Use the -Ou option when piping between bcftools subcommands to speed up performance by removing unnecessary compression/decompression and VCF←→BCF conversion. 
-r, --regions chr|chr:pos|chr:from-to|chr:from-[,…]
    Comma-separated list of regions, see also -R, --regions-file. Note that -r cannot be used in combination with -R. 
-R, --regions-file FILE
    Regions can be specified either on command line or in a VCF, BED, or tab-delimited file (the default). The columns of the tab-delimited file are: CHROM, POS, and, optionally, POS_TO, where positions are 1-based and inclusive. The columns of the tab-delimited BED file are also CHROM, POS and POS_TO (trailing columns are ignored), but coordinates are 0-based, half-open. To indicate that a file be treated as BED rather than the 1-based tab-delimited file, the file must have the ".bed" or ".bed.gz" suffix (case-insensitive). Uncompressed files are stored in memory, while bgzip-compressed and tabix-indexed region files are streamed. Note that sequence names must match exactly, "chr20" is not the same as "20". Also note that chromosome ordering in FILE will be respected, the VCF will be processed in the order in which chromosomes first appear in FILE. However, within chromosomes, the VCF will always be processed in ascending genomic coordinate order no matter what order they appear in FILE. Note that overlapping regions in FILE can result in duplicated out of order positions in the output. This option requires indexed VCF/BCF files. Note that -R cannot be used in combination with -r. 
-s, --samples [^]LIST
    Comma-separated list of samples to include or exclude if prefixed with "^". The sample order is updated to reflect that given on the command line. Note that in general tags such as INFO/AC, INFO/AN, etc are not updated to correspond to the subset samples. bcftools view is the exception where some tags will be updated (unless the -I, --no-update option is used; see bcftools view documentation). To use updated tags for the subset in another command one can pipe from view into that command. 
 -S, --samples-file FILE
    File of sample names to include or exclude if prefixed with "^". One sample per line. See also the note above for the -s, --samples option. The sample order is updated to reflect that given in the input file. The command bcftools call accepts an optional second column indicating ploidy (0, 1 or 2) or sex (as defined by --ploidy, for example "F" or "M")
 -t, --targets [^]chr|chr:pos|chr:from-to|chr:from-[,…]
    Similar as -r, --regions, but the next position is accessed by streaming the whole VCF/BCF rather than using the tbi/csi index. Both -r and -t options can be applied simultaneously: -r uses the index to jump to a region and -t discards positions which are not in the targets. Unlike -r, targets can be prefixed with "^" to request logical complement. For example, "^X,Y,MT" indicates that sequences X, Y and MT should be skipped. Yet another difference between the two is that -r checks both start and end positions of indels, whereas -t checks start positions only. Note that -t cannot be used in combination with -T. 
-T, --targets-file [^]FILE
    Same -t, --targets, but reads regions from a file. Note that -T cannot be used in combination with -t. 
    With the call -C alleles command, third column of the targets file must be comma-separated list of alleles, starting with the reference allele. Note that the file must be compressed and index.
--threads INT
#Q2:74656 variants
#Q3:2504
#Q4:445

##Task 3: Use the GENCODE human gene annotation to obtain the information above. Q1: Which version of GENCODE is GEUVADIS using? Q2: To which genome assembly does this annotation correspond? Q3: How many protein coding genes are annotated in the last version (v29)? Hint: Check GEUVADIS paper. To run the scripts in bin without the need of bash script.sh or ./bin/script.sh add them to the PATH environment variable. Q4: Which command do you use to do this?

#Set the variable 'release' to the version of GENCODE used in GEUVADIS (e.g. `release=99`) and download the corresponding GENCODE annotation
release=
wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_$release/gencode.v$release.annotation.gtf.gz
mv gencode.v$release.annotation.gtf.gz input/unprocessed/gencode/gencode.annotation.gtf.gz

# Obtain a BED file from the GTF, selecting just the 'protein coding' and 'lincRNA' genes
zcat input/unprocessed/gencode/gencode.annotation.gtf.gz | grep "gene_type \"protein_coding\"\|gene_type \"lincRNA\"" | gtf2bed.sh > tmp/gencode.annotation.bed

#Q1:gencode v12
#Q2:grch37
#Q3:19948
#Q4:PATH=$PATH:~/eQTL/bin
#Q5:awk
#Q6:las cordenadas BED empiezan en 0 mientras que GTF empieza en 1, por lo tanto,el TSS10 en BED corresponde en 9 en GTF
#Q7:no se puede escribir y leer al mismo tiempo

# Compute gene lengths 
awk 'BEGIN{OFS="\t"}{print $1,$2,$3,$4,$3-$2,$6}' tmp/gencode.annotation.bed > tmpfile; mv tmpfile tmp/gencode.annotation.bed

# Compute TSS positions. Note that for genes in the '+' strand, the TSS is the start position, and for genes in the '-' strand it is the end position!
awk 'BEGIN{OFS="\t"}{if($6=="+"){print $1,$2,$2+1,$4,$5,$6}else{print $1,$3-1,$3,$4,$5,$6}}' tmp/gencode.annotation.bed > tmpfile; mv tmpfile tmp/gencode.annotation.bed

# Remove 'chr' from chromosome names (-i option to modify the file 'in place')
sed -i "s/^chr//" tmp/gencode.annotation.bed


###Task4 :

# Join the bed file with the expression file
# (Both files should be row-ordered by gene ID. Column order and header are lost in the output file)
join -1 4 -2 1 -t $'\t' <(sort -k4,4 tmp/gencode.annotation.bed) <(zcat input/unprocessed/geuvadis/geuvadis.gene_expr_rpkm.tsv.gz | sort -k1,1) > tmp/joint.tsv
# Subset chr22 (same as the VCF file)
awk '$2==22' tmp/joint.tsv > tmp/joint.chr22.tsv
# Recover the column order, sort rows by chr and start position (WARNING: this command may not work within the docker container for WSL users)
paste <(awk 'BEGIN{OFS="\t"}{print $2,$3,$4,$1,$5,$6}' tmp/joint.chr22.tsv) <(cut -f1-6 --complement tmp/joint.chr22.tsv) | sort -k1,1V -k2,2n > tmp/joint.chr22.bed
# Recover the header
cat <(zcat input/unprocessed/geuvadis/geuvadis.gene_expr_rpkm.tsv.gz | head -1 | sed "s/TargetID/#chr\tstart\tend\tgene\tlength\tstrand/") tmp/joint.chr22.bed > tmp/genes.chr22.rpkm.bed

#Q1:proteins coding
#Q2:porque se tienen que normalizar los datos, ya que sino no podriamos utilizar estos datos correctamente
#Q3 y Q4: utilizariamos diferentes plots para observarlos.

###Task5:
#Q1:los datos se ordenan y se reajuntan los valores

# After:
check.norm.R -i input/processed/genes.chr22.norm.bed.gz -o result/plots/check.norm.pdf

###Task6:
head -1 <file> | awk 'BEGIN{FS=OFS="\t"}{for (i=1;i<=NF;i++) {print i, $i}}'

#Q1:Source Name, Comment [ENA_SAMPLE], Characteristics [Organism], Term Source REF, Term Accession Number, Characteristics [Strain], Characteristics [population], Protocol REF, Technology Type

###Task7:

# Expression PCA
QTLtools pca --bed input/processed/genes.chr22.norm.bed.gz --scale --center --out result/expression 
# Genotypes PCA
QTLtools pca --vcf input/processed/genotypes.chr22.vcf.gz --scale --center --maf 0.05 --distance 50000 --out result/genotypes
# Note the input should coincide with the output of QTLtools pca on each case
pcaPlot.R -i result/expression -o result/plots/expression.pca.pdf
pcaPlot.R -i result/genotypes -o result/plots/genotypes.pca.pdf

#Q1: contains the individual coordinates on the Principal Components (PC),the percentatges of the variance explained
#Q2: conte diferent coordenandes dels diferents components
#Q3: vemos dos graficos en el que  se muestran las diferentes muestras de forma homogenia,pero en dos grupos diferentes.
#Q4: las caracteristicas, Population

pcaPlot.R -i result/genotypes --metadata input/unprocessed/1000g/1000g.phase3_metadata.txt --color super_pop --out result/plots/genotypes.pca.super_pop.pdf
# Generate a common metadata with info about the population, gender and laboratory.
join -j 1 -t $'\t' <(sort -k1,1 input/unprocessed/1000g/1000g.phase3_metadata.txt) <(cut -f1,20 input/unprocessed/geuvadis/geuvadis.metadata.txt | sort -k1,1 | uniq) > tmp/metadata.txt

# Set names for the new metadata
sed -i '1s/^/sampleID\tpop\tsuper_pop\tgender\tlab\n/' tmp/metadata.txt

# Build a linear model and plot the contribution of each factor in the metadata to the total variance
var_partition.R -i input/processed/genes.chr22.norm.bed.gz -m tmp/metadata.txt --formula "~ (1|gender) + (1|pop) + (1|lab)" -o result/plots/vp.pdf
 
#Q5:lab pop gender

###Task8:
# Compute 10 PEER factors
peer.R -i input/processed/genes.chr22.norm.bed.gz -p 10 -o tmp/peer.tsv

# Check how much variance do the first 5 PEER explain in comparison with the known factors
var_partition.R -i input/processed/genes.chr22.norm.bed.gz -m <(paste tmp/peer.tsv tmp/metadata.txt) -f "~ (1|pop) + (1|lab) + PEER1 + PEER2 + PEER3 + PEER4 + PEER5" -o result/plots/vp.peer.pdf

#Q1:En el caso de PEER1 inferior al 10%, en PEER3 y PEER2 tienen más o menos el mismo porcentaje, pero también es inferior al 10%. Y en PEER4 y PEER5 explica solo el 1%
# 'Rscript -e' is just a trick to run an R script without opening an interactive R session in the console. ;)
join -j 1 -t $'\t' tmp/metadata.txt tmp/peer.tsv  | Rscript -e 'write.table(t(read.table(file("stdin", open = "r", blocking = T), h = F)), file = "input/processed/covariates.tsv", quote = F, sep = "\t", col.names = F, row.names = F)'

# Compress it
gzip input/processed/covariates.tsv
QTLtools cis --vcf input/processed/genotypes.chr22.vcf.gz --bed input/processed/genes.chr22.norm.bed.gz --cov input/processed/covariates.tsv.gz --nominal 0.01 --out result/nominals.txt

##Task9:

pvdist.R -i result/nominals.txt --col 12 -o result/plots/pvdist.pdf
plink --ld rs12159165 rs12158382 --vcf input/processed/genotypes.chr22.vcf.gz --out tmp/ld2

#Q1:hay SNPs que s'heredan en bloques
#Q2:la majoria del valors corresponen a 0,02
#Q3:
Haplotype     Frequency    Expectation under LE
   ---------     ---------    --------------------
          GT      0.337079                0.113622
          CT      0                       0.223457
          GG      0                       0.223457
          CG      0.662921                0.439465

QTLtools cis --vcf input/processed/genotypes.chr22.vcf.gz --bed input/processed/genes.chr22.norm.bed.gz --cov input/processed/covariates.tsv.gz --permute 1000 --out result/permutations.txt

###Task10:
permutation.txt
R

###Task11:

mtc.R -n result/nominals.txt -p result/permutations.txt --method 'bonferroni' --alpha 0.05 --out tmp/bonferroni.txt
mtc.R -n result/nominals.txt -p result/permutations.txt --method 'fdr' --alpha 0.05 --out tmp/fdr.txt 
mtc.R -n result/nominals.txt -p result/permutations.txt --method 'perm-fdr' --alpha 0.05 --out result/eqtls.tsv
#Q1: 38208 result/nominals.txt, 12155 result/eqtls.tsv

###Task12:
eQTLviewer.R -i <(head -n 10 result/eqtls.tsv) -g input/processed/genotypes.chr22.vcf.gz -e input/processed/genes.chr22.norm.bed.gz -o result/plots/eQTLs_head.pdf --verbose

###Task13:
zcat input/unprocessed/ensembl/AnnotatedFeatures.gff.gz | awk 'BEGIN{FS=OFS="\t"}{print $1, $4-1, $5, $9}' | sed -r 's/Name=([^;]+);.*/\1/' | grep -v '^GL' | sort -V > tmp/ERB.bed
rsync -av rsync://ftp.ensembl.org/ensembl/pub/grch37/release-86/regulation/homo_sapiens/AnnotatedFeatures.gff.gz input/unprocessed/ensembl
# Merge overlapping features of the same type 
# e.g. chr1 100 200 feat1            chr1 100 300 feat1
#      chr1 150 300 feat1     =>     chr1 100 250 feat2
#      chr1 100 250 feat2
for feat in $(cut -f4 tmp/ERB.bed | sort | uniq); do 
  bedtools merge -i <(grep -Fw $feat tmp/ERB.bed) -c 4 -o distinct
done > input/processed/ERB.collapsed.bed

# Remove 'chr' from chromosome names (-i option to modify the file 'in place')
sed -i "s/^chr//" input/processed/ERB.collapsed.bed

#Q1-2: consideraremos que las barras sera la variavilidad y los puntos el enrequecimiento. por tanto,vemos en el EBF1 hay una variabilidad alta y un enreuecimiento pequeño en el E2F6, la variabilidad sigue siendo mas alta que el enrequecimiento que es muy peqeño. en la H3K79me3, vemos que no hay variabilidad pero si hay mucho enrequecimiento. 

###Task14:
sed '1d' result/eqtls.tsv | cut -f8 | sort | uniq > tmp/eqtls_snps.tsv
wc -l eQTL_HandsOn/result/impact.txt

#Task15:
# Generate a list of sGenes
cut -f1 result/eqtls.tsv | sed '1d' | sed 's/\..\+//' | sort | uniq > tmp/egenes.txt
# We will use as background all the genes (PC and lincRNA) in chr22
awk '{if($1==22) print $4}' tmp/gencode.annotation.bed | sed 's/\..\+//' | sort | uniq > tmp/bg.txt

#Q1:
process:response to lipopolysaccharide and response to molecule of bacterial origin
function:Ras guanyl-nucleotide exchange factor activity
component:endoplasmic reticulum

###Task16:
# Generate input files for QTLtools rtc
grep -Fwf <(cut -f1 result/eqtls.tsv ) result/permutations.txt > tmp/rtc_input
cut -f4,7 input/unprocessed/gwas/gwas.catalog.hg19.bed > tmp/gwas_trait
# Download the file 'hotspots_b37_hg19.bed' from QTLtools website
wget http://jungle.unige.ch/QTLtools_examples/hotspots_b37_hg19.bed --directory-prefix tmp
# Remove 'chr' from chromosome names (-i option to modify the file 'in place')
sed -i 's/^chr//' tmp/hotspots_b37_hg19.bed
# Run RTC
QTLtools rtc --vcf input/processed/genotypes.chr22.vcf.gz --bed input/processed/genes.chr22.norm.bed.gz --cov input/processed/covariates.tsv.gz --hotspot tmp/hotspots_b37_hg19.bed --gwas-cis tmp/gwas_trait tmp/rtc_input --out result/rtc.txt

#Q1:
awk '{if( $20 > 0.9) print $20}' result/rtc.txt | wc -l
39
#Q2:
root@54885daf101f:/home/eqtl/eQTL# grep rs909685 input/unprocessed/gwas/gwas.catalog.hg19.bed 
22	39747670	39747671	rs909685	0	+	Rheumatoid arthritis
22	39747670	39747671	rs909685	0	+	Rheumatoid arthritis (ACPA-positive)

#Q3:

###Task17:
gene=ENSG00000237438.1
compZscore.R --gene $gene --nominal result/nominals.txt -k 50 --output tmp/$gene.rs_z
plink --r square --snps $(cut -f1 tmp/$gene.rs_z) --vcf input/processed/genotypes.chr22.vcf.gz --out tmp/$gene
CAVIAR -z tmp/$gene.rs_z -l tmp/$gene.ld -o result/$gene

#Q1:
#Q2:
root@54885daf101f:/home/eqtl/eQTL# head result/ENSG00000237438.1.log                          
1.58153e+13
root@54885daf101f:/home/eqtl/eQTL# head result/ENSG00000237438.1_post 
SNP_ID	Prob_in_pCausalSet	Causal_Post._Prob.
rs3016112	0.000921059	0.00184212
rs2537972	0.000735372	0.00147074
rs2845395	0.489345	0.978691
rs2845410	0.00174792	0.00349584
rs2845402	0.467383	0.934766
rs2845393	2.47414e-05	4.94827e-05
rs71284930	1.87021e-05	3.74043e-05
rs2845385	1.49473e-05	2.98946e-05
rs2270241	8.52828e-06	1.70566e-05
root@54885daf101f:/home/eqtl/eQTL# head result/ENSG00000237438.1_set  
rs2845395
rs2845402


###Task18:
gene= ENSG00000237438.1
cat <(echo "MarkerName P.value") <(grep $gene result/nominals.txt | cut -d " " -f8,12) > tmp/metal.$gene
#confirmamos que nuestro SNP influye en nuestro gen porque sale arriva del todo entro los picos mas pronunciados.


